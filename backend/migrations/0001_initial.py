# Generated by Django 3.0.1 on 2020-01-30 09:04

import backend.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserCustom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('perm', models.CharField(choices=[('A', 'Бухгалтер'), ('GA', 'Главный бухгалтер'), ('D', 'Default'), ('SM', 'Управляющий складом'), ('GSM', 'Главный Управляющий складами'), ('FM', 'Управляющий фабрикой'), ('GFM', 'Главный управляющий фабриками'), ('OM', 'Управляющий офисом'), ('GOM', 'Главный управляющий офисами'), ('FO', 'Основатель'), ('CFO', 'Компания основателей'), ('SM', 'Менеджер по безопасности'), ('GSM', 'Главный мнеджер по безопасности'), ('H', 'Помощник - контролер'), ('S', 'Поставщик'), ('F', 'Фирма'), ('PM', 'Отдел кадров'), ('GPM', 'Начальник отдела кадров'), ('DIR', 'Директор'), ('AAA', 'ADMIN')], max_length=10, verbose_name='Должность')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Почта')),
                ('name', models.CharField(max_length=100, verbose_name='Логин')),
                ('is_staff', models.BooleanField(default=False, verbose_name='staff status')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(max_length=100, verbose_name='Страна')),
                ('city', models.CharField(max_length=100, verbose_name='Город')),
                ('street', models.CharField(max_length=100, verbose_name='Улица')),
                ('bilding', models.CharField(max_length=100, verbose_name='Здание')),
                ('flat', models.CharField(max_length=100, verbose_name='Квартира или офис')),
                ('type_org', models.CharField(choices=[('O', 'Офис'), ('F', 'Фабрика'), ('S', 'Склад'), ('PH', 'Жилой дом'), ('FH', 'Многоквартирный дом'), ('EP', 'Рабочее место'), ('LP', 'Жилое мест')], max_length=10, verbose_name='Тип организации')),
            ],
            options={
                'verbose_name': 'Адрес',
                'verbose_name_plural': 'Адрес',
                'ordering': ['-country'],
            },
        ),
        migrations.CreateModel(
            name='DeliveryTransport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(max_length=50, verbose_name='Модель')),
                ('type_of_transport', models.CharField(choices=[('S', 'Самолет'), ('V', 'Вертолет'), ('P', 'Поезд'), ('A', 'Автобус'), ('MA', 'Микроавтобус'), ('K', 'Корабль')], max_length=3, verbose_name='Тип транспорта')),
                ('year_constructed', models.CharField(max_length=12, verbose_name='Год создания')),
                ('order_coast', models.CharField(max_length=50, verbose_name='Стоимость перевозки')),
                ('ready', models.BooleanField(db_index=True, verbose_name='Готовность')),
                ('time_delivery', models.CharField(max_length=50, verbose_name='Время Доставки')),
                ('done_order', models.CharField(max_length=50, verbose_name='Рейсов выполненно')),
            ],
            options={
                'verbose_name': 'Доставляющий транспорт',
                'verbose_name_plural': 'Доставляющий транспорт',
                'ordering': ['-type_of_transport'],
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100, verbose_name='Имя')),
                ('second_name', models.CharField(max_length=100, unique=True, verbose_name='Фамилия')),
                ('photo', models.ImageField(blank=True, upload_to='', verbose_name='Фото')),
                ('mobile', models.CharField(max_length=100, verbose_name='Телефон')),
                ('mail', models.EmailField(max_length=254, unique=True, verbose_name='Почта')),
                ('info', models.TextField(verbose_name='Информация')),
                ('he', models.BooleanField(verbose_name='Высшее образование')),
                ('salary', models.CharField(max_length=30, verbose_name='Зарплата')),
                ('create_date', models.DateTimeField(db_index=True, verbose_name='Дата создания')),
                ('experience', models.CharField(max_length=100, verbose_name='Опыт')),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='Адрес_работы', to='backend.Address')),
            ],
            options={
                'verbose_name': 'Работник',
                'verbose_name_plural': 'Работник',
                'ordering': ['second_name'],
            },
            bases=(backend.models.Ret, models.Model),
        ),
        migrations.CreateModel(
            name='Factories',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('holding', models.CharField(max_length=50, verbose_name='Холдинг')),
            ],
            options={
                'verbose_name': 'Фабрики',
                'verbose_name_plural': 'Фабрики',
                'ordering': ['-holding'],
            },
            bases=(models.Model, backend.models.Ret),
        ),
        migrations.CreateModel(
            name='Firm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('mobile', models.CharField(max_length=10, verbose_name='Телефон')),
                ('director', models.CharField(max_length=100, verbose_name='Директор')),
                ('mail', models.EmailField(max_length=254, verbose_name='Почта')),
                ('connect_date_firm', models.DateTimeField(db_index=True, verbose_name='Дата начало сотрудничества')),
                ('create_date_firm', models.DateTimeField(db_index=True, verbose_name='Дата создания')),
                ('firm_is_supplier', models.BooleanField(verbose_name='Фирма это доставщик')),
                ('info', models.TextField(blank=True, null=True, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Фирма',
                'verbose_name_plural': 'Фирма',
                'ordering': ['name'],
            },
            bases=(models.Model, backend.models.Ret),
        ),
        migrations.CreateModel(
            name='Founder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100, verbose_name='Имя')),
                ('second_name', models.CharField(max_length=100, verbose_name='Фамилия')),
                ('age', models.IntegerField(verbose_name='Возраст')),
                ('namber', models.CharField(max_length=10, verbose_name='Телефон')),
                ('mail', models.CharField(max_length=100, verbose_name='Почта')),
                ('info', models.TextField(verbose_name='Информация')),
            ],
            options={
                'verbose_name': 'Основатель',
                'verbose_name_plural': 'Основатель',
                'ordering': ['second_name'],
            },
        ),
        migrations.CreateModel(
            name='Founders',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('founders', models.CharField(max_length=50, verbose_name='Компания')),
                ('founder', models.ManyToManyField(related_name='Основатель', to='backend.Founder')),
            ],
            options={
                'verbose_name': 'Основатели',
                'verbose_name_plural': 'Основатели',
                'ordering': ['-founders'],
            },
            bases=(models.Model, backend.models.Ret),
        ),
        migrations.CreateModel(
            name='FoundersCompanyOrganization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('companyname', models.CharField(max_length=50, verbose_name='Имя компании')),
                ('factories', models.ManyToManyField(blank=True, related_name='Фабрики_компании', to='backend.Factories', verbose_name='Фабрики')),
                ('founders', models.ManyToManyField(related_name='Основатели', to='backend.Founders', verbose_name='Основатели')),
            ],
            options={
                'verbose_name': 'Таблица компаний',
                'verbose_name_plural': 'Таблица компаний',
                'ordering': ['-companyname'],
            },
            bases=(models.Model, backend.models.Ret),
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('create_date', models.DateTimeField(db_index=True, verbose_name='Дата создания')),
                ('firm', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='backend.Firm', verbose_name='Фирма')),
            ],
            options={
                'verbose_name': 'Вещь',
                'verbose_name_plural': 'Вещь',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Items',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_group', models.CharField(max_length=50, verbose_name='Название группы')),
                ('count', models.IntegerField(verbose_name='Количество')),
                ('item', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='backend.Item', verbose_name='Предмет')),
            ],
            options={
                'verbose_name': 'Вещи',
                'verbose_name_plural': 'Вещи',
                'ordering': ['name_group'],
            },
        ),
        migrations.CreateModel(
            name='ItemsSupplier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_group', models.CharField(max_length=50, verbose_name='Название группы')),
                ('items', models.ManyToManyField(related_name='Вещи_доступные_поставщику', to='backend.Items', verbose_name='Вещи, доступные поставщику')),
            ],
            options={
                'verbose_name': 'Вещи, которые доступны от поставщика',
                'verbose_name_plural': 'Вещи, которые доступны от поставщика',
                'ordering': ['name_group'],
            },
            bases=(models.Model, backend.models.Ret),
        ),
        migrations.CreateModel(
            name='Mesh',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mesh', models.CharField(max_length=100, verbose_name='Материал')),
                ('info_mesh', models.TextField(verbose_name='Информация о материале')),
                ('additional_mesh', models.CharField(max_length=100, verbose_name='Название доп. материала')),
                ('info_additional_mesh', models.TextField(verbose_name='Информация о доп. материале')),
            ],
            options={
                'verbose_name': 'Материал',
                'verbose_name_plural': 'Материал',
                'ordering': ['mesh'],
            },
        ),
        migrations.CreateModel(
            name='Office',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название')),
                ('mobile', models.CharField(max_length=20, verbose_name='Телефон')),
                ('mail', models.CharField(max_length=50, verbose_name='Почта')),
                ('info', models.TextField(verbose_name='Информация о офисе')),
                ('this_company_office', models.BooleanField(db_index=True, verbose_name='Принадлежит этой компании')),
                ('state_or_private', models.BooleanField(db_index=True, verbose_name='Госсударственная?')),
                ('address', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='backend.Address', verbose_name='Адрес')),
            ],
            options={
                'verbose_name': 'Офис',
                'verbose_name_plural': 'Офис',
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='Offices',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('holding', models.CharField(max_length=50, verbose_name='Холдинг')),
                ('office', models.ManyToManyField(related_name='Офисы', to='backend.Office', verbose_name='Офисы')),
            ],
            options={
                'verbose_name': 'Офисы',
                'verbose_name_plural': 'Офисы',
                'ordering': ['-holding'],
            },
            bases=(models.Model, backend.models.Ret),
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.CharField(max_length=100, verbose_name='Цена')),
                ('sale_price', models.CharField(max_length=100, verbose_name='Цена со скидкой')),
            ],
            options={
                'verbose_name': 'Цена',
                'verbose_name_plural': 'Цена',
                'ordering': ['price'],
            },
        ),
        migrations.CreateModel(
            name='RoleNow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('countpeople', models.IntegerField(verbose_name='Количество людей в подчинении')),
                ('needHE', models.BooleanField(verbose_name='Необходимость высшего образования')),
            ],
            options={
                'verbose_name': 'Должность',
                'verbose_name_plural': 'Должность',
                'ordering': ['name'],
            },
            bases=(models.Model, backend.models.Ret),
        ),
        migrations.CreateModel(
            name='Storage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название')),
                ('mobile', models.CharField(max_length=20, verbose_name='Телефон')),
                ('mail', models.CharField(max_length=50, verbose_name='Почта')),
                ('info', models.TextField(verbose_name='Информация о складе')),
                ('full_content', models.CharField(max_length=50, verbose_name='Полная вместимость')),
                ('content', models.IntegerField(verbose_name='Заполненность в %')),
                ('this_company_storage', models.BooleanField(db_index=True, verbose_name='Принадлежит этой компании')),
                ('state_or_private', models.BooleanField(db_index=True, verbose_name='Госсударственная?')),
                ('address', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='backend.Address', verbose_name='Адрес')),
            ],
            options={
                'verbose_name': 'Склад',
                'verbose_name_plural': 'Склад',
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='Storages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('holding', models.CharField(max_length=50, verbose_name='Холдинг')),
                ('storage', models.ManyToManyField(related_name='Склады', to='backend.Storage', verbose_name='Склады')),
            ],
            options={
                'verbose_name': 'Склады',
                'verbose_name_plural': 'Склады',
                'ordering': ['-holding'],
            },
            bases=(models.Model, backend.models.Ret),
        ),
        migrations.CreateModel(
            name='TotalRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('role_now', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Должность', to='backend.RoleNow', verbose_name='Занимаемая должность')),
            ],
            options={
                'verbose_name': 'Должность',
                'verbose_name_plural': 'Должность',
                'ordering': [],
            },
            bases=(models.Model, backend.models.Ret),
        ),
        migrations.CreateModel(
            name='SupplierInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_storages', models.IntegerField(verbose_name='Количество складов')),
                ('average_time_delivery', models.TextField(verbose_name='Среднее время доставки')),
                ('text', models.TextField(verbose_name='Доп. информация')),
                ('delivery_transport', models.ManyToManyField(related_name='Доставляющий_транспорт', to='backend.DeliveryTransport', verbose_name='Доставляющий транспорт')),
                ('factories', models.ManyToManyField(related_name='Фабрики_поставщика', to='backend.Factories', verbose_name='Фабрики поставщика')),
                ('offices', models.ManyToManyField(related_name='Офисы_поставщика', to='backend.Offices', verbose_name='Офисы поставщика')),
                ('storages', models.ManyToManyField(related_name='Склады_поставщика', to='backend.Storages', verbose_name='Склады поставщика')),
            ],
            options={
                'verbose_name': 'Информация о поставщике',
                'verbose_name_plural': 'Информация о поставщике',
                'ordering': ['count_storages'],
            },
            bases=(models.Model, backend.models.Ret),
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название')),
                ('mobile', models.CharField(max_length=50, verbose_name='Телефон')),
                ('director', models.TextField(verbose_name='Директор')),
                ('mail', models.EmailField(max_length=254, verbose_name='Почта')),
                ('create_date', models.DateTimeField(db_index=True, verbose_name='Дата создания')),
                ('connect_date', models.DateTimeField(db_index=True, verbose_name='Дата начала сотрудничества')),
                ('founderscompanyorganization', models.ManyToManyField(related_name='Компании_организаторы', to='backend.FoundersCompanyOrganization', verbose_name='Компании-организаторы')),
                ('items_supplier', models.ManyToManyField(related_name='Постовляемые_вещи', to='backend.ItemsSupplier', verbose_name='Поставляемые вещи')),
                ('supplier_info', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Информация_о_поставщике', to='backend.SupplierInfo', verbose_name='Информация о поставщике')),
            ],
            options={
                'verbose_name': 'Поставщик',
                'verbose_name_plural': 'Поставщик',
                'ordering': ['name'],
            },
            bases=(models.Model, backend.models.Ret),
        ),
        migrations.CreateModel(
            name='Ready',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_status', models.CharField(choices=[('R', 'Ready'), ('W', 'Wait'), ('R-P', 'Ready-part')], max_length=4, verbose_name='Статус')),
                ('total_price', models.CharField(max_length=100, verbose_name='Полная стоимость')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Адрес_доставки_товаров', related_query_name='Адрес_доставки_товаров', to='backend.Address', verbose_name='Адрес доставки товаров')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Заказавший_работник', related_query_name='Работник', to='backend.Employee', verbose_name='Заказавший работник')),
                ('items', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Вещи_на_доставку', related_query_name='Вещи_на_доставку', to='backend.Items', verbose_name='Вещи на доставку')),
            ],
            options={
                'verbose_name': 'Статус заказа',
                'verbose_name_plural': 'Статус заказа',
                'ordering': ['order_status'],
            },
        ),
        migrations.CreateModel(
            name='Param',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('height', models.CharField(max_length=20, verbose_name='Высота')),
                ('width', models.CharField(max_length=20, verbose_name='Ширина')),
                ('thickness', models.CharField(max_length=20, verbose_name='Толщина')),
                ('weight', models.CharField(max_length=20, verbose_name='Вес')),
                ('diagonal', models.CharField(max_length=20, verbose_name='Диагональ')),
                ('mesh', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='backend.Mesh', verbose_name='Материал')),
            ],
            options={
                'verbose_name': 'Параметры',
                'verbose_name_plural': 'Параметры',
                'ordering': ['-weight'],
            },
            bases=(models.Model, backend.models.Ret),
        ),
        migrations.CreateModel(
            name='OrderTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название заказа')),
                ('wornot', models.BooleanField(verbose_name='Доставлен')),
                ('create_date', models.DateTimeField(db_index=True, verbose_name='Дата создания')),
                ('get_date', models.DateTimeField(db_index=True, verbose_name='Дата получения')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Адрес', to='backend.Address')),
                ('items', models.ManyToManyField(related_name='Вещи', to='backend.Items')),
            ],
            options={
                'verbose_name': 'Таблица заказа',
                'verbose_name_plural': 'Таблица заказа',
                'ordering': ['address'],
            },
            bases=(models.Model, backend.models.Ret),
        ),
        migrations.CreateModel(
            name='Orderes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_price', models.CharField(max_length=50, verbose_name='Полная стоимость')),
                ('send', models.BooleanField(verbose_name='Отправлено')),
                ('received', models.CharField(choices=[('Y', 'Да'), ('N', 'Нет'), ('N\\A', 'Не определено')], max_length=3, verbose_name='Получено?')),
                ('pos_one_get', models.CharField(choices=[('Y', 'Да'), ('N', 'Нет'), ('N\\A', 'Не определено')], max_length=3, verbose_name='Возможность одной доставки')),
                ('date_send', models.DateTimeField(db_index=True, verbose_name='Дата отправки')),
                ('date_get', models.DateTimeField(db_index=True, verbose_name='Дата получения')),
                ('orderes', models.ManyToManyField(related_name='Заказы', related_query_name='Заказы', to='backend.Ready', verbose_name='Заказы')),
                ('storage', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Склад_получатель', related_query_name='Склад_получатель', to='backend.Storage', verbose_name='Склад-получатель')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Поставщик_товара', related_query_name='Поставщик_товара', to='backend.Supplier', verbose_name='Поставщик')),
            ],
            options={
                'verbose_name': 'Заказы',
                'verbose_name_plural': 'Заказы',
                'ordering': ['total_price'],
            },
            bases=(models.Model, backend.models.Ret),
        ),
        migrations.CreateModel(
            name='ItemsInStorage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('items', models.ManyToManyField(related_name='Предметы', to='backend.Items', verbose_name='Группы вещей на складе')),
                ('storage', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='backend.Storage', verbose_name='Склад')),
            ],
            options={
                'verbose_name': 'Вещи на складе',
                'verbose_name_plural': 'Вещи на складе',
                'ordering': ['storage'],
            },
            bases=(models.Model, backend.models.Ret),
        ),
        migrations.AddField(
            model_name='item',
            name='param',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='backend.Param', verbose_name='Параметры'),
        ),
        migrations.AddField(
            model_name='item',
            name='price',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='backend.Price', verbose_name='Цена'),
        ),
        migrations.AddField(
            model_name='founderscompanyorganization',
            name='offices',
            field=models.ManyToManyField(blank=True, related_name='Офисы_компании', to='backend.Offices', verbose_name='Офисы'),
        ),
        migrations.AddField(
            model_name='founderscompanyorganization',
            name='storages',
            field=models.ManyToManyField(blank=True, related_name='Склады_компании', to='backend.Storages', verbose_name='Склады'),
        ),
        migrations.AddField(
            model_name='firm',
            name='founderscompanyorganization',
            field=models.ManyToManyField(related_name='Организаторы', to='backend.FoundersCompanyOrganization', verbose_name='Основатели'),
        ),
        migrations.CreateModel(
            name='Factory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название')),
                ('mobile', models.CharField(max_length=20, verbose_name='Телефон')),
                ('mail', models.CharField(max_length=50, verbose_name='Почта')),
                ('info', models.TextField(verbose_name='Информация о фабрике')),
                ('count_empl', models.IntegerField(verbose_name='Колличество сотрудников')),
                ('this_company_factory', models.BooleanField(db_index=True, verbose_name='Принадлежит этой компании')),
                ('state_or_private', models.BooleanField(db_index=True, verbose_name='Госсударственная?')),
                ('address', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='backend.Address', verbose_name='Адрес')),
            ],
            options={
                'verbose_name': 'Фабрикa',
                'verbose_name_plural': 'Фабрикa',
                'ordering': ['-name'],
            },
        ),
        migrations.AddField(
            model_name='factories',
            name='factory',
            field=models.ManyToManyField(related_name='Фабрики', to='backend.Factory', verbose_name='Фабрики'),
        ),
        migrations.AddField(
            model_name='employee',
            name='orderes',
            field=models.ManyToManyField(blank=True, related_name='Заказы_работника', to='backend.OrderTable'),
        ),
        migrations.AddField(
            model_name='employee',
            name='trole',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Права', to='backend.TotalRole'),
        ),
        migrations.AddField(
            model_name='employee',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Логин', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='DeliveryInAWay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('items', models.ManyToManyField(related_name='Вещи_в_пути', to='backend.Items', verbose_name='Вещи в пути')),
                ('transport', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='Транспорт_доставки', to='backend.DeliveryTransport', verbose_name='Транспорт доставки')),
            ],
            options={
                'verbose_name': 'Транспорт с грузом',
                'verbose_name_plural': 'Транспорт с грузом',
                'ordering': ['transport'],
            },
            bases=(models.Model, backend.models.Ret),
        ),
    ]
